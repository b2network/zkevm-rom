;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; ecrecover in: A = hash, B = r, C = s, D = v
;;           out: A = result, B = result_code
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

VAR GLOBAL ecrecoverpk_hash
VAR GLOBAL ecrecoverpk_r
VAR GLOBAL ecrecoverpk_s
VAR GLOBAL ecrecoverpk_v
VAR GLOBAL ecrecoverpk_r_inv
VAR GLOBAL ecrecoverpk_y
VAR GLOBAL ecrecoverpk_y2
VAR GLOBAL ecrecoverpk_k1
VAR GLOBAL ecrecoverpk_k2
VAR GLOBAL ecrecoverpk_RR
VAR GLOBAL ecrecoverpk_v_parity
VAR GLOBAL ecrecoverpk_s_upperlimit

; ERROR CODES (B)
; 0 - no error
; 1 - r is zero (0)
; 2 - r is too big
; 3 - s is zero (0)
; 4 - s is too big
; 5 - v not valid value (1b, 1c)
; 6 - not exists sqrt of y
; 100 - fail sqrt, but has solution (!!!)

; MAP: MAlicious Prover
;
; RESOURCES:
;   PATH without root:      1014 arith + 10 binaries + 4527 steps
;   PATH with root:         528 arith + 523 binaries + 6294 steps - 1 keccak
;   PATH fail checks:       2 arith + 8 binaries + 45 steps

ecrecover_pubkey_precompiled:
        %FNEC_MINUS_ONE :MSTORE(ecrecoverpk_s_upperlimit),JMP(ecrecoverpk_store_args)

ecrecover_pubkey_tx:
        %FNEC_DIV_TWO   :MSTORE(ecrecoverpk_s_upperlimit)

ecrecoverpk_store_args:

        ; save arguments

        A           :MSTORE(ecrecoverpk_hash)
        B           :MSTORE(ecrecoverpk_r)
        C           :MSTORE(ecrecoverpk_s)
        D           :MSTORE(ecrecoverpk_v)



        %MAX_CNT_BINARY - CNT_BINARY - 550   :JMPN(outOfCountersBinary)
        %MAX_CNT_ARITH - CNT_ARITH - 1100     :JMPN(outOfCountersArith)
        %MAX_CNT_STEPS - STEP - 6400     :JMPN(outOfCountersStep)

        $ => A         :MLOAD(cntKeccakPreProcess)
        %MAX_CNT_KECCAK_F - CNT_KECCAK_F - A - 1 :JMPN(outOfCountersKeccak)

        ; save RR to call return at end of routine
        RR          :MSTORE(ecrecoverpk_RR)

        ; r in [1, FNEC-1]
        $ => B      :MLOAD(ecrecoverpk_r)
        0n => A
        $           :EQ,JMPC(ecrecoverpk_r_is_zero)
        %FNEC_MINUS_ONE => A

        $           :LT,JMPC(ecrecoverpk_r_is_too_big)

        ; s in [1, ecrecoverpk_s_upperlimit]
        $ => A      :MLOAD(ecrecoverpk_s_upperlimit)
        $ => B      :MLOAD(ecrecoverpk_s)
        $           :LT,JMPC(ecrecoverpk_s_is_too_big)
        0n => A
        $           :EQ,JMPC(ecrecoverpk_s_is_zero)

        ; compute r inverse
        ; [steps: 23, bin: 4]
        $ => A      :MLOAD(ecrecoverpk_r),CALL(invFnEc)
        B           :MSTORE(ecrecoverpk_r_inv)

        ; [steps: 37, bin: 6, arith: 2]
        0x1Bn => B
        $ => A      :MLOAD(ecrecoverpk_v)
        $ => E      :EQ,JMPNC(ecrecoverpk_v_not_eq_1b)

        ;  ecrecoverpk_v_eq_1b:
        0n          :MSTORE(ecrecoverpk_v_parity),JMP(ecrecoverpk_v_ok)

ecrecoverpk_v_not_eq_1b:
        0x1Cn => B
        ; [steps: 42, bin: 8, arith: 2]
        $ => E      :EQ,JMPNC(ecrecoverpk_v_not_eq_1b1c)

        ; ecrecoverpk_v_eq_1c:
        1n          :MSTORE(ecrecoverpk_v_parity),JMP(ecrecoverpk_v_ok)

ecrecoverpk_v_ok:
        ;
        ; y^2 = x^3 + 7
        ;
        ; A*B*A + 7 = calculate y from x
        ;
        ; [steps: 44, bin: 8, arith: 2]
        $ => A,B    :MLOAD(ecrecoverpk_r),CALL(mulFpEc)

        C => A
        $ => B      :MLOAD(ecrecoverpk_r),CALL(mulFpEc)

        7 => A      :CALL(addFpEc)

        ; load on A parity expected
        ; [steps: 69, bin: 8, arith: 8]
        $ => A      :MLOAD(ecrecoverpk_v_parity)
        C           :MSTORE(ecrecoverpk_y2),CALL(sqrtFpEc)

        ; If has root B = 1 else B = 0
        ; If B = 1 => C is alias-free (see sqrtFpEc)

        ; [steps: 85, bin: 9, arith: 10]
        B           :JMPNZ(ecrecoverpk_has_sqrt)

        ; hasn't sqrt, now verify

        $ => C      :MLOAD(ecrecoverpk_y2),CALL(checkSqrtFpEc)
        ; check must return on A register 1, because the root has no solution

        ; [steps: 4524, bin: 10, arith: 1014]
        1           :ASSERT,JMP(ecrecoverpk_not_exists_sqrt_of_y)

ecrecoverpk_has_sqrt:
        ; (v == 1b) ecrecoverpk_y_parity = 0x00
        ; (v == 1c) ecrecoverpk_y_parity = 0x01

        ; C: y = sqrt(y^2)  [it's alias free, verified in previous lines]

        0x01n => A
        C => B

        ; A = parity(y)
        $ => A      :AND

        ; how solution y = 0 not exists because -7 not has a cubic root,
        ; always parity of A must be equal to v_parity

        ; ASSERT (A == ecrecoverpk_v_parity), if it fails => MAP
        A           :MLOAD(ecrecoverpk_v_parity)

        C           :MSTORE(ecrecoverpk_y)

        ; calculate C as (hash * inv_r) % FNEC
        $ => A      :MLOAD(ecrecoverpk_hash)
        ; [steps: 92, bin: 10, arith: 10]
        $ => B      :MLOAD(ecrecoverpk_r_inv),CALL(mulFnEc)

        ; calculate k1 as (FNEC - hash * inv_r) % FNEC
        ; C = (hash * inv_r) % FNEC no alias free (MAP)
        C => A
        0 => B
        ; C is zero, special case
        $   :EQ,JMPNC(ecrecoverpk_k1_c_is_not_zero)

        ; [steps: 100, bin: 9, arith: 12]

ecrecoverpk_k1_c_is_zero:
        ; k1 = 0 is alias-free
        0   :MSTORE(mulPointEc_k1), JMP(ecrecoverpk_k1_calculated)


ecrecoverpk_k1_c_is_not_zero:
        ; A,C = (hash * inv_r) % FNEC
        ; check A is alias-free, if not MAP ==> proof fails
        %FNEC => B
        1   :LT         ; ASSERT A < FNEC

        ; FNEC - A = FNEC - (hash * inv_r) % FNEC
        A => B
        %FNEC => A
        ; B != 0 ==> multPointEc_k1 = FNEC - B
        ; k1 is alias-free
        $   :SUB, MSTORE(mulPointEc_k1)

ecrecoverpk_k1_calculated:

        $ => A      :MLOAD(ecrecoverpk_s)

        ; [steps: 105, bin: 9, arith: 13]
        $ => B      :MLOAD(ecrecoverpk_r_inv),CALL(mulFnEc)

        ;   C = (s * inv_r) % FNEC => k2
        ; [steps: 113, bin: 9, arith: 15]
        C => A      :MSTORE(mulPointEc_k2)
        %FNEC => B

        ; ASSERT(k2 is alias free)
        1           :LT

        %ECGX       :MSTORE(mulPointEc_p1_x)
        %ECGY       :MSTORE(mulPointEc_p1_y)

        ; r isn't an alias because the range has been checked at beginning
        $ => A      :MLOAD(ecrecoverpk_r)
        A           :MSTORE(mulPointEc_p2_x)

        ; y isn't an alias because was checked before
        ; (r,y) is a point of curve because it satisfacts the curve equation
        $ => A      :MLOAD(ecrecoverpk_y)
        ; [steps: 120, bin: 10, arith: 15]
        A           :MSTORE(mulPointEc_p2_y),CALL(mulPointEc)

        ; check if result of mulPointEc is point at infinity
        HASHPOS     :JMPZ(ecrecoverpk_p3_point_at_infinity)

        ; [steps: 6280, bin: 522, arith: 527]
        ; generate keccak of public key to obtain ethereum address
        ; $ => E         :MLOAD(lastHashKIdUsed)
        ; E + 1 => E     :MSTORE(lastHashKIdUsed)
        ; 0 => HASHPOS
        ; 32 => D

        ; p3_x, p3_y are alias free because arithmetic guarantees it
        ; $ => A         :MLOAD(mulPointEc_p3_x)
        ; A              :HASHK(E)
        ; $ => A         :MLOAD(mulPointEc_p3_y)
        ; A              :HASHK(E)

        ; 64             :HASHKLEN(E)
        ; $ => A         :HASHKDIGEST(E)

        ; for address take only last 20 bytes
        ; 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B
        ; $ => A         :AND
        ; AtEnd [steps: 6294, bin: 523, keccak: 1, arith: 528]

        $ => A          :MLOAD(mulPointEc_p3_x)
        $ => B          :MLOAD(mulPointEc_p3_y)
        0 => C          :JMP(ecrecoverpk_end)

; ERRORS
ecrecoverpk_r_is_zero:
        1 => C      :JMP(ecrecoverpk_error)

ecrecoverpk_r_is_too_big:
        2 => C      :JMP(ecrecoverpk_error)

ecrecoverpk_s_is_zero:
        3 => C      :JMP(ecrecoverpk_error)

ecrecoverpk_s_is_too_big:
        4 => C      :JMP(ecrecoverpk_error)

ecrecoverpk_v_not_eq_1b1c:
        ; AtEnd [steps: 45, bin: 8, arith: 2]
        5 => C      :JMP(ecrecoverpk_error)

ecrecoverpk_not_exists_sqrt_of_y:
        ; AtEnd [steps: 4527, bin: 10, arith: 1014]
        6 => C      :JMP(ecrecoverpk_error)

ecrecoverpk_p3_point_at_infinity:
        7 => C      :JMP(ecrecoverpk_error)

ecrecoverpk_error:
        0 => A
        0 => B

ecrecoverpk_end:
        $ => RR     :MLOAD(ecrecoverpk_RR)
        :RETURN
